@layout DashboardLayout
@page "/"
@page "/_dashboard/"
@using UKHO.ADDS.Mocks.Configuration
@using UKHO.ADDS.Mocks.Domain.Configuration
@using UKHO.ADDS.Mocks.States
@inject NavigationManager NavManager

<table class="rz-table rz-striped rz-hoverable rz-grid-table rz-mb-4"
       style="width: 100%; border-collapse: separate; border-spacing: 0;">
    <thead style="position: sticky; top: 0; background-color: var(--rz-panel-background-color); z-index: 10;">
    <tr>
        <th style="width: 50%; font-size: 1.15rem; font-weight: 500; padding: 0.4rem 0 0.6rem 0;">URL Pattern</th>
        <th style="width: 15%; font-size: 1.15rem; font-weight: 500; padding: 0.4rem 0 0.6rem 0;">HTTP Method(s)</th>
        <th style="width: 20%; font-size: 1.15rem; font-weight: 500; padding: 0.4rem 0 0.6rem 0;">State</th>
        <th style="width: 15%; font-size: 1.15rem; font-weight: 500; padding: 0.4rem 0 0.6rem 0;">Actions</th>
    </tr>
    </thead>

    <tbody>
        @foreach (var service in _services)
        {
            var isExpanded = _expandedServices.Contains(service.Name);
            var toggleIcon = isExpanded ? "expand_less" : "expand_more";
            var hasStateOverrides = service.StateOverrides.Values.Any(v => v != WellKnownState.Default);

            <tr>
                <td colspan="4" style="background: transparent; border-top: 1px solid var(--rz-border-color); padding-top: 1rem;">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                        <RadzenButton Icon="@toggleIcon"
                                      ButtonStyle="ButtonStyle.Light"
                                      Size="ButtonSize.Small"
                                      Style="min-width: unset;"
                                      Click="() => ToggleServiceExpansion(service)" />

                        <RadzenText Style="font-size: 1.15rem; font-weight: 500; margin-bottom: 0.5rem;">
                            @service.Name
                        </RadzenText>

                        @if (hasStateOverrides)
                        {
                            <RadzenBadge Text="State override" BadgeStyle="BadgeStyle.Danger" class="rz-ml-2" />
                        }
                    </RadzenStack>
                </td>
            </tr>

            @if (isExpanded)
            {
                foreach (var fragment in service.ServiceFragments)
                {
                    var groupedMappings = fragment.Mappings
                    .GroupBy(m => m.Pattern)
                    .OrderBy(g => g.Key);

                    foreach (var group in groupedMappings)
                    {
                        var relativePath = $"/{service.Prefix.Trim('/')}{group.Key}";
                        var isOverride = fragment.IsOverride;

                        var callerType = group.First().EndpointName;
                        var overrideKey = $"interactive/{service.Prefix}/{callerType}";
                        var currentState = _selectedStates.TryGetValue(overrideKey, out var val)
                        ? val
                        : WellKnownState.Default;

                        <tr>
                            <td>
                                <span style="@(service.StateOverrides.TryGetValue(overrideKey, out var overrideVal) && overrideVal != WellKnownState.Default
                                                 ? "color: red;" : "color: inherit;")">
                                    @relativePath
                                </span>
                                @if (isOverride)
                                {
                                    <RadzenBadge Text="Override" BadgeStyle="BadgeStyle.Success" class="rz-ml-2" />
                                }
                            </td>
                            <td>
                                @foreach (var method in group
                               .Select(m => m.HttpMethod)
                               .Distinct()
                               .OrderBy(GetMethodSortOrder))
                                {
                                    <RadzenBadge Text="@method"
                                                 Style="@GetBadgeColorStyleForMethod(method)"
                                                 class="rz-mr-1" />
                                }
                            </td>
                            <td>
                                <RadzenDropDown @bind-Value="_selectedStates[overrideKey]"
                                                Data="service.StateNames"
                                                Style="width: 100%; min-width: 160px;"
                                                Placeholder="Select a state" />
                            </td>
                            <td>
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                                    <RadzenButton Size="ButtonSize.Small"
                                                  Variant="Variant.Text"
                                                  Text="Set"
                                                  Click="() => SetState(service, callerType)" />
                                    <RadzenButton Size="ButtonSize.Small"
                                                  Variant="Variant.Text"
                                                  Text="Reset"
                                                  Click="() => ResetState(service, callerType)" />
                                </RadzenStack>
                            </td>
                        </tr>
                    }
                }
            }
        }
    </tbody>
</table>

@code {
    private List<ServiceDefinition> _services = [];
    private readonly Dictionary<string, string> _selectedStates = new(); // key = interactive/prefix/callerType
    private readonly HashSet<string> _expandedServices = new();

    protected override void OnInitialized()
    {
        _services = ServiceRegistry.Definitions.ToList();

        for (var i = 0; i < _services.Count; i++)
        {
            var service = _services[i];

            foreach (var fragment in service.ServiceFragments)
            {
                foreach (var mapping in fragment.Mappings)
                {
                    var key = $"interactive/{service.Prefix}/{mapping.EndpointName}";

                    if (service.StateOverrides.TryGetValue(key, out var overriddenState))
                    {
                        _selectedStates[key] = overriddenState;
                    }
                    else
                    {
                        _selectedStates[key] = WellKnownState.Default;
                    }
                }
            }

            if (i == 0)
                _expandedServices.Add(service.Name);
        }
    }

    private void SetState(ServiceDefinition service, string callerType)
    {
        var key = $"interactive/{service.Prefix}/{callerType}";

        if (_selectedStates.TryGetValue(key, out var selected))
        {
            service.AddStateOverride("interactive", service.Prefix, callerType, selected);
        }
    }

    private void ResetState(ServiceDefinition service, string callerType)
    {
        var key = $"interactive/{service.Prefix}/{callerType}";

        _selectedStates[key] = WellKnownState.Default;
        service.AddStateOverride("interactive", service.Prefix, callerType, WellKnownState.Default);
    }

    private void ToggleServiceExpansion(ServiceDefinition service)
    {
        if (_expandedServices.Contains(service.Name))
            _expandedServices.Remove(service.Name);
        else
            _expandedServices.Add(service.Name);
    }

    private string GetBadgeColorStyleForMethod(string method)
    {
        return method.ToUpperInvariant() switch
        {
            "GET" => "background-color: #007bff; color: white;",       // Blue
            "POST" => "background-color: #28a745; color: white;",      // Green
            "PUT" => "background-color: #fd7e14; color: white;",       // Orange
            "DELETE" => "background-color: #dc3545; color: white;",    // Red
            "PATCH" => "background-color: #ffc107; color: black;",     // Yellow
            "OPTIONS" => "background-color: #6f42c1; color: white;",   // Purple
            "HEAD" => "background-color: #adb5bd; color: black;",      // Light Gray
            "TRACE" => "background-color: #adb5bd; color: black;",     // Light Gray
            _ => "background-color: #e0e0e0; color: black;"            // Default neutral
        };
    }

    private int GetMethodSortOrder(string method)
    {
        return method.ToUpperInvariant() switch
        {
            "GET" => 0,
            "POST" => 1,
            "PUT" => 2,
            "DELETE" => 3,
            _ => 4
        };
    }
}
